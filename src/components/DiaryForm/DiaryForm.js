import React, { useState, useEffect } from 'react';
import { FaFileUpload } from 'react-icons/fa';
import  { userLocale }  from '../../utils/utilsValues';

import './DiaryForm.css';

const DiaryForm = ({ date, onEntrySubmit}) => {
    // STATE FOR THE ENTRY TEXT
    // ESTADO PARA EL TEXTO DE LA ENTRADA
    const [entry, setEntry] = useState("");
    // STATE FOR THE IMAGE AND ITS PREVIEW
    // ESTADO PARA LA IMAGEN Y SU VISTA PREVIA
    const [image, setImage] = useState(null);
    

    useEffect(() => {
        // WE VERIFY IF INDEXEDDB IS COMPATIBLE WITH THE BROWSER
        // VERIFICAMOS SI INDEXEDDB ES COMPATIBLE CON EL NAVEGADOR
        if (!('indexedDB' in window)) {
            alert("¡IndexedDB no es compatible!");
        }
    }, []);
    // THE EMPTY DEPENDENCE [] ENSURES THAT USEEFFECT IS ONLY EXECUTED ONCE WHEN SETTING UP THE COMPONENT
    // LA DEPENDENCIA VACÍA [] ASEGURA QUE USEEFFECT SOLO SE EJECUTE UNA VEZ AL MONTAR EL COMPONENTE

    const handleSubmit = (e) => {
        // WE PREVENT THE DEFAULT BEHAVIOR OF THE FORM
        // PREVENIMOS EL COMPORTAMIENTO POR DEFECTO DEL FORMULARIO
        e.preventDefault();

        const newEntry = {
            // WE CONVERT THE DATE TO A TOLOCALEDATESTRING DATE FORMAT.
            // Convertimos la fecha a una toLocaleDateString
            date: date.toLocaleDateString(userLocale),
            entry, // ENTRY TEXT // TEXTO DE LA ENTRADA
            image // IMAGE URL // URL DE LA IMAGEN
        };

        // WE OPEN THE "DIARYDB" DATABASE WITH VERSION 1
        // ABRIMOS LA BASE DE DATOS "DIARYDB" CON VERSIÓN 1
        const request = window.indexedDB.open('diaryDB', 1);

        // Manejamos el error al abrir la base de datos MODAL SI ES NECESARIO
        // Manejamos el error al abrir la base de datos MODAL SI ES NECESARIO
        request.onerror = (event) => {
            console.error('Error al abrir la base de datos:', event.target.errorCode);
        };

        request.onsuccess = (event) => { // Manejamos el éxito al abrir la base de datos
            const db = event.target.result; // Obtenemos la instancia de la base de datos
            const transaction = db.transaction(['entries'], 'readwrite'); // Iniciamos una transacción en modo de lectura y escritura
            const objectStore = transaction.objectStore('entries'); // Obtenemos el almacén de objetos 'entries'
            const addRequest = objectStore.add(newEntry); // Agregamos la nueva entrada al almacén de objetos

            addRequest.onsuccess = () => { // Manejamos el éxito al guardar la entrada
                console.log('Entrada guardada correctamente.');
                setEntry(''); // Limpiamos el estado de la entrada de texto
                setImage(null); // Limpiamos el estado de la imagen
                onEntrySubmit(newEntry);  // Llamamos a la función de actualización de entradas en el padre
            };

            addRequest.onerror = (event) => { // Manejamos el error al guardar la entrada
                console.error('Error al guardar la entrada:', event.target.errorCode);
            };

            transaction.oncomplete = () => db.close(); // Cerramos la instancia de la base de datos una vez que la transacción se completa
        };

        request.onupgradeneeded = (event) => { // Configuración de la base de datos en caso de que necesite ser creada o actualizada
            const db = event.target.result;
            const objectStore = db.createObjectStore('entries', { keyPath: 'id', autoIncrement: true }); // Creamos el almacén de objetos 'entries'
            objectStore.createIndex('date', 'date', { unique: false }); // Creamos un índice en el campo 'date'
        };
    };

    const handleFileChange = (e) => {
        // WE VERIFY IF THERE IS A SELECTED FILE
        // VERIFICAMOS SI HAY UN ARCHIVO SELECCIONADO
        if (e.target.files && e.target.files[0]) { 
            const file = e.target.files[0];
            const reader = new FileReader();
            // WE UPDATE THE STATUS OF THE IMAGE WITH THE URL GENERATED BY FILEREADER
            // ACTUALIZAMOS EL ESTADO DE LA IMAGEN CON LA URL GENERADA POR FILEREADER
            reader.onloadend = () => setImage(reader.result); 
            // WE READ THE FILE AS A DATA URL
            // LEEMOS EL ARCHIVO COMO UNA URL DE DATOS
            reader.readAsDataURL(file); 
        }
    };

    return (
        <div className="diary-form">
            <div className="header">
                <h2>Entrada para: {new Date(date).toLocaleDateString()}</h2>
            </div>
            <textarea
                value={entry} 
                onChange={(e) => setEntry(e.target.value)}
                placeholder="Escribe tu entrada aquí..."
            ></textarea>
            <div className="file-upload">
                <input
                    type="file"
                    accept="image/*"
                    className="file-input"
                    id="image-upload"
                    onChange={handleFileChange} 
                />
                <label htmlFor="image-upload" className="file-label">
                    <FaFileUpload className="upload-icon" /> Subir Imagen
                </label>
            </div>
            {image && (
                // IF THERE IS AN IMAGE FOR PREVIEW, WE SHOW IT
                // SI HAY UNA IMAGEN PARA VISTA PREVIA, LA MOSTRAMOS
                <div className="image-preview">
                    <img src={image} alt="Imagen de la entrada" className="uploaded-image" />
                </div>
            )}
            <button onClick={handleSubmit}>
                Guardar Entrada
            </button>

        </div>
    );
};

export default DiaryForm;
